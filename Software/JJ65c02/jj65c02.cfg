
#
# Reflects the memory map of the JJ65c02 setup
#   use .segment "CODE" for ROM
#   use .segment "PROG" for RAM
#
MEMORY
{
  ZP:         start = $0,    size = $100,  type = rw, define = yes, file = "";
  RAM0:       start = $0200, size = $300,  type = rw, define = yes, file = "";
  RAM:        start = $0500, size = $ab00, type = rw, define = yes, file = "%O.bin";
  ROM_FILL:   start = $8000, size = $3000, type = rw, define = yes, fill = yes, fillval = $ea, file = "%O.rom";
  IO:         start = $b000, size = $1000, type = rw, define = yes, fill = yes, fillval = $ea, file = "%O.rom"; # 1011 0000 0000 0000
  ROM:        start = $c000, size = $4000, type = ro, define = yes, fill = yes, fillval = $ea, file = "%O.rom"; # 1100 0000 0000 0000
}

#
# Make all optional so we can use one cc65 config file for ROM and RAM images
#
SEGMENTS {
  ZEROPAGE:  load = ZP,   type = zp,  define = yes, optional = yes;
  SYSRAM:    load = RAM0, type = rw,  define = yes, optional = yes;
  PROG:      load = RAM,  type = rw,  define = yes, optional = yes;
  BSS:       load = RAM,  type = bss, define = yes, optional = yes;
  HEAP:      load = RAM,  type = bss, define = yes, optional = yes;
  RWDATA:    load = RAM,  type = rw,  define = yes, optional = yes;
  CODE:      load = ROM,  type = ro,  define = yes, optional = yes;
  RODATA:    load = ROM,  type = ro,  define = yes, optional = yes;
  RODATA_PA: load = ROM,  type = ro,  define = yes, optional = yes, align=$0100;
  VECTORS:   load = ROM,  type = ro,  start = $fffa, optional = yes;
}
